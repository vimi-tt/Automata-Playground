# **Simulador de Autômatos**

O projeto `Simulador de Autômatos` é uma implementação em Prolog para manipular e simular autômatos finitos determinísticos (AFD). Ele inclui o módulo `automato` para operações com AFDs e um programa principal (`main`) que oferece uma interface interativa via console. O simulador permite carregar autômatos de arquivos JSON, testar palavras, visualizar informações e salvar resultados em JSON.

## **Índice**
1. [Descrição](#descrição)
2. [Funcionalidades](#funcionalidades)
3. [Estrutura do Projeto](#estrutura-do-projeto)
4. [Dependências](#dependências)
5. [Como Usar](#como-usar)

---

## **Descrição**

Este projeto implementa um simulador interativo para autômatos finitos determinísticos (AFD) em Prolog. O módulo `automato` fornece as operações fundamentais (criação, teste e salvamento de resultados), enquanto o programa principal (`main`) oferece um menu interativo para o usuário manipular o autômato. Os dados do autômato são lidos de arquivos JSON, e os resultados dos testes podem ser exportados no mesmo formato.

---

## **Funcionalidades**

### **1. Carregar Autômato**
- Carrega um autômato a partir de um arquivo JSON (`automato.json` por padrão).
- Componentes carregados:
  - Alfabeto
  - Estado inicial
  - Estados finais
  - Transições

### **2. Testar Palavras**
- Permite testar palavras individualmente ou em lote (via arquivo `palavras.txt`).
- Exibe:
  - Palavra testada
  - Status de aceitação (`true` ou `false`)
  - Estados percorridos

### **3. Visualizar Informações**
- Exibe no console as informações do autômato carregado:
  - Alfabeto
  - Estado inicial
  - Estados finais
  - Transições

### **4. Salvar Resultados**
- Salva os resultados dos testes em um arquivo JSON especificado pelo usuário.
- Resultados incluem:
  - Palavra testada
  - Status de aceitação
  - Estados percorridos

### **5. Interface Interativa**
- Menu principal com opções para:
  - Carregar autômato
  - Visualizar informações
  - Testar palavras
  - Salvar resultados
  - Sair

---

## **Estrutura do Projeto**

O projeto é composto por dois arquivos principais:

### **1. Módulo `automato`**
- Contém as operações básicas para manipular AFDs.
- **Predicados principais**:
  - `criar_automato/2`: Cria um autômato a partir de um arquivo JSON.
    - **Exemplo**: `criar_automato("automato.json", Automato).`
  - `imprimir_automato/1`: Exibe as informações do autômato.
    - **Exemplo**: `imprimir_automato(Automato).`
  - `teste_palavra/3`: Testa uma palavra no autômato.
    - **Exemplo**: `teste_palavra(Automato, "ab", Resultado).`
  - `salvar_resultados/2`: Salva os resultados em um arquivo JSON.
    - **Exemplo**: `salvar_resultados("resultados.json", Resultados).`
- **Estrutura do Autômato**:
  - `automato(Alfabeto, EstadoInicial, EstadosFinais, Transicoes)`:
    - `Alfabeto`: Lista de símbolos.
    - `EstadoInicial`: Átomo.
    - `EstadosFinais`: Lista de átomos.
    - `Transicoes`: Lista de `de(Origem, Simbolo, Destino)`.

- **Estrutura do Resultado**:
  - `resultado_teste{palavra: Palavra, aceita: Aceita, estados_percorridos: Estados}`:
    - `palavra`: String.
    - `aceita`: `true` ou `false`.
    - `estados_percorridos`: Lista de estados.

### **2. Programa Principal (`main`)** 
- Implementa uma interface interativa para o usuário.
- **Predicados principais**:
  - `main/0`: Inicia o simulador.
    - **Exemplo**: `?- main.`
  - `main_loop/1`: Controla o menu interativo.
  - `carregar_json/1`: Carrega o autômato do arquivo padrão.
  - `testar_palavras/1`: Permite testar palavras individualmente ou em lote.
  - `salvar_testes/1`: Salva os resultados dos testes de um arquivo de palavras.
- **Arquivos Padrão**:
  - `automato.json`: Arquivo JSON com o autômato.
  - `palavras.txt`: Arquivo TXT com palavras a testar (uma por linha).

---

## **Dependências**

O projeto depende das seguintes bibliotecas do Prolog:
- `library(http/json)`: Para leitura e escrita de arquivos JSON.
- `library(http/json_convert)`: Para conversão entre Prolog e JSON.

---

## **Como Usar**

1. **Preparação**:
   - Certifique-se de ter um arquivo `automato.json` com a estrutura do autômato (alfabeto, estado inicial, estados finais e transições).
   - Opcionalmente, crie um arquivo `palavras.txt` com uma palavra por linha para testes em lote.

2. **Execução**:
   - Carregue o programa no interpretador Prolog:
     ```prolog
     ?- [main].
     ```
   - Inicie o simulador:
     ```prolog
     ?- main.
     ```

3. **Menu de Opções**:
   - `1`: Carrega o autômato de `automato.json`.
   - `2`: Exibe as informações do autômato carregado.
   - `3`: Testa palavras (individual ou via `palavras.txt`).
   - `4`: Salva os resultados dos testes em um arquivo JSON.
   - `5`: Encerra o programa.

4. **Exemplo de Interação**:
   ```prolog
   === Simulador de Automatos ===
   Bem vindo ao simulador de automatos

   === Menu ===
   1 Carregar automato arquivo padrao
   2 Visualizar informacoes do automato
   3 Testar palavra(s)
   4 Salvar resultados dos testes em JSON
   5 Sair
   Escolha uma opcao: 1
   Automato carregado com sucesso
   ```